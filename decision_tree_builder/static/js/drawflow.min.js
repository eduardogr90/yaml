/*
 * Mini Drawflow helper used by Decision Tree Builder.
 * This is not the full upstream project but provides compatible helpers
 * for path generation and event dispatching.
 */
(function (global) {
  class SimpleDrawflow {
    constructor() {
      this.listeners = {};
    }

    on(event, handler) {
      if (!this.listeners[event]) {
        this.listeners[event] = [];
      }
      this.listeners[event].push(handler);
    }

    emit(event, payload) {
      const handlers = this.listeners[event] || [];
      handlers.forEach((fn) => {
        try {
          fn(payload);
        } catch (err) {
          console.error('Drawflow handler error', err);
        }
      });
    }

    static cubicPath(p1, p2) {
      const dx = Math.abs(p2.x - p1.x) * 0.5;
      const hx1 = p1.x + dx;
      const hx2 = p2.x - dx;
      return `M ${p1.x} ${p1.y} C ${hx1} ${p1.y}, ${hx2} ${p2.y}, ${p2.x} ${p2.y}`;
    }

    static uuid(prefix = 'node') {
      const random = Math.random().toString(16).slice(2, 8);
      const time = Date.now().toString(16);
      return `${prefix}_${time}_${random}`;
    }
  }

  global.SimpleDrawflow = SimpleDrawflow;
})(window);
